<!DOCTYPE html>
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>VanillaTodo Demo</title>
    <style>
        body {
	background-image: url(https://dl.dropbox.com/s/vmh843ysgpj5a7d/sketch-1575113576243.jpg?dl=0);
}

ul#taskList {
	padding: 0 25px;
}

li.task {
    background-image: url(https://dl.dropbox.com/s/g4httndsyr3a970/sketch-1575113766111.png?dl=0);
	list-style-type: none;
	font-family: Arial;
	font-size: 1.2em;
	padding: 7px 0;
	transition: all 5s ease-in-out;
		-webkit-transition: all 5s ease-in-out;
			-moz-transition: all 5s ease-in-out;

}

li.task:hover {
	background-image: url(https://dl.dropbox.com/s/vmh843ysgpj5a7d/sketch-1575113576243.jpg?dl=0);
}

li.task:hover .deleteTaskBtn {
	visibility: visible;
	opacity: 1;
}

li.task:not(:last-child) {
	border-bottom: 1px solid snow;
}

input.taskCheckbox {
	position: relative;
	float: left;
	margin-right: 10px;
	-webkit-appearance: none;
	width: 15px;
	height: 15px;
	border: 1px solid snow;
	border-radius: 5px;
	outline: none;
	margin-left: 5px;
	text-align: center;
	cursor: pointer;
}

input.taskCheckbox:checked {
	background-color: #009925;
}

input.taskCheckbox:checked:after {
	color: snow;
	content: "\2713";
	display: block;
	font-size: 12px;
	height: 12px;
	position: absolute;
	width: 12px;
	left: 0.5px;
	bottom: 2px;
}

input.taskCheckbox + label.taskLabel {
	color: #200386;
}

input.taskCheckbox:checked + label.taskLabel {
	font-style: italic;
	color: snow;
}

input[placeholder] {
	font-size: 1.1em;
}

#container {
	width: 95%;
	height: 500px;
	position: relative;
	margin: 0 auto;
	background-image: url(https://dl.dropbox.com/s/g4httndsyr3a970/sketch-1575113766111.png?dl=0);
	border-radius: 5px;
}

#header {
    background-image: url(https://dl.dropbox.com/s/g4httndsyr3a970/sketch-1575113766111.png?dl=0);
	color: snow;
	padding: 5px;
	text-align: center;
	font-family: Arial, sans-serif;
}

#inputContainer {
	padding: 15px;
}

#inputContainer #taskInput {
    background-image: url(https://dl.dropbox.com/s/vmh843ysgpj5a7d/sketch-1575113576243.jpg?dl=0);
	padding: 10px;
	width: 100%;
	border-radius: 5px;
	box-sizing: border-box;
}

#listWrapper {
	position: absolute;
	bottom: 50px;
	top: 160px;
	right: 0;
	left: 0;
	overflow: scroll;
}

#deleteBtnWrapper {
	width: 100%;
	box-sizing: border-box;
	position: absolute;
	bottom: 15px;
	padding: 0 15px;
}

#deleteBtnWrapper #deleteCompletedBtn {
	float: left;
	-webkit-appearance: none;
	color: snow;
	background-image: url(https://dl.dropbox.com/s/vmh843ysgpj5a7d/sketch-1575113576243.jpg?dl=0);
	border-radius: 3px;
	border: 1px solid blue;
	width: 125px;
	height: 25px;
	font-size: 11px;
    cursor: pointer;
}
#deleteBtnWrapper #deleteCompletedBtn:hover {
	cursor: pointer;
}

#deleteBtnWrapper #clearTasksBtn {
	float: right;
	-webkit-appearance: none;
	color: snow;
	background-image: url(https://dl.dropbox.com/s/vmh843ysgpj5a7d/sketch-1575113576243.jpg?dl=0);
	border-radius: 4px;
	border: 1px solid blue;
	width: 125px;
	height: 25px;
	font-size: 11px;
}

#deleteBtnWrapper #clearTasksBtn:hover {
	cursor: pointer;
}

.deleteTaskBtn {
    cursor: pointer;
	float: right;
	color: snow;
	background: rgba(0,0,0,0);
	font-size: 16px;
	font-weight: bold;
	border: 1px solid snow;
	border-radius: 50%;
	padding: 10px 5px;
	line-height: 0;
	margin-right: 5px;
}

.deleteTaskBtn:hover {
	background-image: url(https://dl.dropbox.com/s/vmh843ysgpj5a7d/sketch-1575113576243.jpg?dl=0);
}
       #Face{
                width:22%;
                height:22%;
                border-radius: 11px;
                border-style: solid;
                background-image: url(https://dl.dropbox.com/s/vmh843ysgpj5a7d/sketch-1575113576243.jpg?dl=0);
            } 
    </style>
</head>
<body>
<div id="container">
  <div id="header">
      <center>
    <canvas id="Face" width="400" height="400">
</canvas>
      </center>
  </div>
  <div id="inputContainer">
    <input id="taskInput" type="text" placeholder="Add a task" maxlength="50" />
  </div>
  <div id="listWrapper">
    <ul id="taskList">
    </ul>
  </div>
  <div id="deleteBtnWrapper" >
    <button id="deleteCompletedBtn" onclick="deleteCompleted()">Delete Completed</button>
    <button id="clearTasksBtn" onclick="deleteAll()">Clear</button>
  </div>
</div>
    <script type="text/javascript">
        function drawClock() {drawFace(ctx, radius);
  drawNumbers(ctx, radius);drawTime(ctx, radius);}
    
    var canvas = document.getElementById("Face");
var ctx = canvas.getContext("2d");
var radius = canvas.height / 2;
ctx.translate(radius, radius);
radius = radius * 0.90
setInterval(drawClock, 1000);
    //animate input
Input.onclick = function() {animate({duration: 555,timing: function(timeFraction) {return timeFraction;},draw: function(progress) {
Input.style.width = progress * 85 + '%';}});};
    
    Face.onclick = function() {animate({duration: 555,timing: function(timeFraction) {return timeFraction;},draw: function(progress) {
Face.style.width = progress * 100 + '%';}});};
    
   function animate({duration, draw, timing}) {

  let start = performance.now();

  requestAnimationFrame(function animate(time) {
    let timeFraction = (time - start) / duration;
    if (timeFraction > 1) timeFraction = 1;

    let progress = timing(timeFraction)

    draw(progress);

    if (timeFraction < 1) {
      requestAnimationFrame(animate);
    }

  });
}

function drawFace(ctx, radius) {
  var grad;
  ctx.beginPath();
  ctx.arc(0, 0, radius, 0, 2*Math.PI);
  ctx.fillStyle = 'gold';
  ctx.fill();
  grad = ctx.createRadialGradient(0,0,radius*0.95, 0,0,radius*1.05);
  grad.addColorStop(0.88, 'yellow');
  grad.addColorStop(0.77, 'gold');
  grad.addColorStop(0.22, '#200386');
  ctx.strokeStyle = grad;
  ctx.lineWidth = radius*0.1;
  ctx.stroke();
  ctx.beginPath();
    ctx.arc(0, 70, 22, 0, Math.PI, false);
    ctx.moveTo(0, 0);
  ctx.arc(0, 0, radius*0.1, 0, 2*Math.PI);
    ctx.fillStyle = '#333';
  ctx.fill();
}
//change number on face
function drawNumbers(ctx, radius) {
  var ang;
  var num;
  ctx.font = radius*0.15 + "px arial";
  ctx.textBaseline="middle";
  ctx.textAlign="center";
  for(num = 1; num < 13; num++){
    ang = num * Math.PI / 6;
    ctx.rotate(ang);
    ctx.translate(0, -radius*0.85);
    ctx.rotate(-ang);
    ctx.fillText(num.toString(), 0, 0);
    ctx.rotate(ang);
    ctx.translate(0, radius*0.85);
    ctx.rotate(-ang);
  }
}
//change time
function drawTime(ctx, radius){
    var now = new Date();
    var hour = now.getHours();
    var minute = now.getMinutes();
    var second = now.getSeconds();
    hour=hour%12;
    hour=(hour*Math.PI/6)+
    (minute*Math.PI/(6*60))+
    (second*Math.PI/(360*60));
    drawHand(ctx, hour, radius*0.5, radius*0.07);
    //minute
    minute=(minute*Math.PI/30)+(second*Math.PI/(30*60));
    drawHand(ctx, minute, radius*0.8, radius*0.07);
    // second
    second=(second*Math.PI/30);
    drawHand(ctx, second, radius*0.9, radius*0.02);
}
//change draw hand
function drawHand(ctx, pos, length, width) {
    ctx.beginPath();
    ctx.arc(-77, -77, 9, 0, Math.PI * 2, true);  // Left eye
    ctx.moveTo(95, 65);
    ctx.fillStyle = 'green';
  ctx.fill();
    ctx.arc(77, -77, 22, 44, 22, Math.PI * 2, true); 
    ctx.moveTo(95, 65);
    // Right eye
    ctx.stroke();
    ctx.fillStyle = 'red';
  ctx.fill();
    ctx.lineWidth = width;
    ctx.lineCap = "round";
    ctx.moveTo(0,0);
    ctx.rotate(pos);
    ctx.lineTo(0, -length);
    ctx.arc(9, 0, 5, 0, Math.PI * 4, true);
    ctx.moveTo(50, 50);
    ctx.stroke();
    ctx.rotate(-pos);
}
    </script>
<script>
   
    document.querySelector('#taskInput').addEventListener('keypress', function (e) {
    var key = e.which || e.keyCode;
    if (( key == 13 ) && ( document.querySelector('#taskInput').value.length > 0 )) // 13 is enter
    	addToList( this.value.trim() );
});

var taskList = [],
	completedTasks = [];

if( JSON.parse( localStorage.getItem( 'taskList' )))
	taskList = JSON.parse( localStorage.getItem( 'taskList' ));
else
	localStorage.setItem("taskList", JSON.stringify( taskList ));

updateCompletedListArray();
updateListView();

function updateCompletedListArray() {
	completedTasks = [];

	taskList.forEach(function( task ) {
		if( task.done )
			completedTasks.push( taskList.indexOf( task ) + '' );
	});
}
function addToList( task ){
	if( checkDuplicate( task )) {
		// animateInvalid(); // Animates input field with red outline if an invalid input is given
		return;
	}

	taskList.push({
		name: task,
		done: false
	});

	updateListView();

	localStorage.setItem('taskList', JSON.stringify( taskList ));
	document.querySelector('#taskInput').value = '';
}

function updateListView() {
	var ul = document.getElementById('taskList');

	ul.innerHTML = '';

	taskList.forEach(function( task ) {
		var listItem = document.createElement('li'),
			taskLabel = document.createElement('label'),
			delBtn = document.createElement('span'),
			checkbox = document.createElement('input');

		listItem.className = 'task';
		listItem.id = taskList.indexOf( task );

		taskLabel.className = 'taskLabel';
		taskLabel.textContent = task.name;
		taskLabel.htmlFor = 'c' + taskList.indexOf( task );

		delBtn.className = 'deleteTaskBtn';
		delBtn.textContent = 'x';
		delBtn.onclick = deleteThisTask;

		checkbox.className = 'taskCheckbox'
		checkbox.id = 'c' + taskList.indexOf( task );
		checkbox.type = 'checkbox';
		checkbox.checked = task.done;
		checkbox.onclick = toggleChecked;

		listItem.appendChild( checkbox );
		listItem.appendChild( taskLabel );
		listItem.appendChild( delBtn );
			  ul.appendChild( listItem );
	});
}

function toggleChecked(e) {
	var checkStatus = e.target.checked,
		task = e.target.parentElement,
		taskId = task.id,
		removed = false;

	taskList[taskId].done = checkStatus;

	if( completedTasks.length === 0 ) {
		completedTasks.push( taskId );
	}
	else {
		completedTasks.forEach(function( index ) {
			if( taskId === index ) {
				completedTasks.splice( completedTasks.indexOf( index ), 1 );
				removed = true;
			}
		});

		if( !removed ) {
			completedTasks.push( taskId );
			completedTasks.sort();
		}
	}

	saveLocalList();
}

function checkDuplicate( task ) {
	var matchFound = false;

	taskList.forEach(function( t ) {
		if( t.name === task )
			matchFound = true;
	});

	return matchFound;
}

function deleteThisTask(e) {
	taskList.splice( e.target.parentElement.id, 1 );

	saveLocalList();
	updateCompletedListArray();
	updateListView();
}

function deleteCompleted() {
	var length = completedTasks.length;

	for( var i = completedTasks.length; i--; ) {
		taskList.splice( completedTasks[i], 1 );
	}

	saveLocalList();
	updateCompletedListArray();
	updateListView();
}

function deleteAll() {
	if(( taskList.length > 0 ) && confirm( "Are you sure you want to delete all your tasks?" )) {
		var ul = document.getElementById('taskList');
		ul.innerHTML = '';
		taskList = completedTasks = [];
		saveLocalList();
	}
}

function saveLocalList() {
	localStorage.setItem("taskList", JSON.stringify( taskList ));
}
</script>
</body>
</html>
